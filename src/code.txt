//convert.c
#include "convert.h"
#include <stdbool.h>
#include <ctype.h>
#include <math.h>

bool try_convert_to_int(const char* string, int* result)
{
    int value = 0;
    int sign = 1;
    int i = 0;

    while (isspace(string[i]))
        i++;

    if (string[i] == '-' || string[i] == '+')
    {
        if (string[i] == '-')
            sign = -1;
        i++;
    }

    for (; string[i] != '\0'; i++)
    {
        if (isdigit(string[i]))
        {
            value = value * 10 + (string[i] - '0');
        }
        else
        {
            break;
        }
    }

    while (isspace(string[i]))
        i++;

    if (string[i] != '\0')
        return false;

    *result = value * sign;
    return true;
}

bool try_convert_to_long(const char* string, long* result)
{
    long value = 0;
    int sign = 1;
    int i = 0;

    while (isspace(string[i]))
        i++;

    if (string[i] == '-' || string[i] == '+')
    {
        if (string[i] == '-')
            sign = -1;
        i++;
    }

    for (; string[i] != '\0'; i++)
    {
        if (isdigit(string[i]))
        {
            value = value * 10 + (string[i] - '0');
        }
        else
        {
            break;
        }
    }

    while (isspace(string[i]))
        i++;

    if (string[i] != '\0')
        return false;

    *result = value * sign;
    return true;
}

bool try_convert_to_double(const char* string, double* result)
{
    double value = 0.0;
    double fraction = 0.1;
    int sign = 1;
    int i = 0;

    while (string[i] == ' ')
        i++;

    if (string[i] == '-' || string[i] == '+')
    {
        if (string[i] == '-')
            sign = -1;
        i++;
    }

    while (string[i] >= '0' && string[i] <= '9')
    {
        value = value * 10 + (string[i] - '0');
        i++;
    }

    if (string[i] == '.')
    {
        i++;
        while (string[i] >= '0' && string[i] <= '9')
        {
            value += (string[i] - '0') * fraction;
            fraction *= 0.1;
            i++;
        }
    }

    while (string[i] == ' ')
        i++;

    if (string[i] == 'e' || string[i] == 'E')
    {
        i++;
        int exponent = 0;
        int exponentSign = 1;

        if (string[i] == '-' || string[i] == '+')
        {
            if (string[i] == '-')
                exponentSign = -1;
            i++;
        }

        while (string[i] >= '0' && string[i] <= '9')
        {
            exponent = exponent * 10 + (string[i] - '0');
            i++;
        }

        double multiplier = 1.0;
        for (int j = 0; j < exponent; j++)
            multiplier *= 10.0;

        value *= pow(multiplier, exponentSign);
    }

    while (string[i] != '\0')
    {
        if (string[i] != ' ')
            return false;
        i++;
    }

    *result = value * sign;
    return true;
}
//-------------------

//convert.h
#ifndef LB4_CONVERT_H
#define LB4_CONVERT_H

#include <stdbool.h>

bool try_convert_to_int(const char* string, int* result);
bool try_convert_to_long(const char* string, long* result);
bool try_convert_to_double(const char* string, double* result);

#endif
//-------------------

//datetime.c
#include "datetime.h"
#include "input.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>

bool date_is_valid(DateTime dateTime)
{
    if (dateTime.year < 0 || dateTime.month < 1 || dateTime.month > 12 || dateTime.day < 1)
    {
        errno = EINVAL;
        return false;
    }

    if (dateTime.hour < 0 || dateTime.hour >= 24)
    {
        errno = EINVAL;
        return false;
    }

    if (dateTime.minute < 0 || dateTime.minute >= 60)
    {
        errno = EINVAL;
        return false;
    }

    if (dateTime.second < 0 || dateTime.second >= 60)
    {
        errno = EINVAL;
        return false;
    }

    if (dateTime.millisecond < 0 || dateTime.millisecond >= 1000)
    {
        errno = EINVAL;
        return false;
    }

    int days_in_month;
    switch (dateTime.month)
    {
        case 2:
            if ((dateTime.year % 4 == 0 && dateTime.year % 100 != 0) || dateTime.year % 400 == 0)
                days_in_month = 29;
            else
                days_in_month = 28;
            break;
        case 4:
        case 6:
        case 9:
        case 11:
            days_in_month = 30;
            break;
        default:
            days_in_month = 31;
    }

    if (dateTime.day > days_in_month)
    {
        errno = EINVAL;
        return false;
    }

    return true;
}

WeekDay get_weekday(DateTime dateTime)
{
    if (!date_is_valid(dateTime))
    {
        errno = EINVAL;
        return -1;
    }

    struct tm tm_date = {
            .tm_year = dateTime.year - 1900,
            .tm_mon = dateTime.month - 1,
            .tm_mday = dateTime.day
    };

    time_t timestamp = mktime(&tm_date);

    struct tm* tm_result = localtime(&timestamp);
    return tm_result->tm_wday;
}

char* get_month(DateTime dateTime)
{
    if (!date_is_valid(dateTime))
    {
        errno = EINVAL;
        return NULL;
    }

    static const char* months[] = {
            "INVALID",
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
    };

    return (char*)months[dateTime.month];
}

char* get_weekday_str(WeekDay weekDay)
{
    if (weekDay < SUNDAY || weekDay > SATURDAY)
    {
        errno = EINVAL;
        return NULL;
    }

    static const char* weekdays[] = {
            "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    };

    return (char*)weekdays[weekDay];
}

char* get_datetime_str(DateTime dateTime)
{
    if (!date_is_valid(dateTime))
    {
        errno = EINVAL;
        return NULL;
    }

    char* weekdays[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
    char* months[] = {"JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"};

    const int MAX_DATETIME_LENGTH = 50;
    char* datetime_str = (char*)malloc(MAX_DATETIME_LENGTH * sizeof(char));
    
    if (datetime_str == NULL)
    {
        return NULL;
    }

    sprintf(datetime_str, "%s, %02d %s %04d %02d:%02d:%02d.%03f",
            weekdays[get_weekday(dateTime)],
            dateTime.day,
            months[dateTime.month - 1],
            dateTime.year,
            dateTime.hour,
            dateTime.minute,
            dateTime.second,
            dateTime.millisecond);

    return datetime_str;
}
//-------------------

//datetime.h
#ifndef LB4_DATETIME_H
#define LB4_DATETIME_H

#include <stdbool.h>
#include <time.h>

#define ERR_INVALID_FORMAT -1

typedef enum {
    SUNDAY,
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY
} WeekDay;

typedef struct {
    int year;
    int month;
    int day;
    int hour;
    int minute;
    int second;
    double millisecond;
} DateTime;

bool date_is_valid(DateTime dateTime);
WeekDay get_weekday(DateTime dateTime);
char* get_month(DateTime dateTime);
char* get_weekday_str(WeekDay weekDay);
char* get_datetime_str(DateTime dateTime);

#endif

//-------------------

//input.c
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <malloc.h>
#include "log.h"
#include "input.h"
#include "convert.h"

YESNO ask_yes_no(const char* msg, const char* error_msg)
{
    char response[10];

    while (true)
    {
        printf("%s ", msg);
        fgets(response, sizeof(response), stdin);

        if (response[0] == 'y' || response[0] == 'Y')
            return YES;
        else if (response[0] == 'n' || response[0] == 'N')
            return NO;
        else
            printf("%s\n", error_msg);
    }
}

int ask_int(const char* msg, const char* error_msg)
{
    char input[100];

    while (true)
    {
        printf("%s ", msg);
        fgets(input, sizeof(input), stdin);

        int value;
        if (try_convert_to_int(input, &value))
            return value;
        else
            printf("%s\n", error_msg);
    }
}

double ask_double(const char* msg, const char* error_msg)
{
    char input[100];

    while (true)
    {
        printf("%s ", msg);
        fgets(input, sizeof(input), stdin);

        size_t len = strlen(input);
        if (len > 0 && (input[len - 1] == '\n' || input[len - 1] == '\r'))
            input[len - 1] = '\0';

        double value;
        if (try_convert_to_double(input, &value))
            return value;
        else
            printf("%s\n", error_msg);
    }
}

char* ask_string(const char* msg, const char* error_msg)
{
    char* input = malloc(100 * sizeof(char));

    while (true)
    {
        printf("%s ", msg);
        fgets(input, sizeof(input), stdin);

        if (input[strlen(input) - 1] == '\n')
            input[strlen(input) - 1] = '\0';

        if (strlen(input) > 0)
            return input;
        else
            printf("%s\n", error_msg);
    }
}
//-------------------

//input.h
#ifndef LB4_INPUT_H
#define LB4_INPUT_H

typedef enum {
    NO,
    YES
} YESNO;

YESNO ask_yes_no(const char* msg, const char* error_msg);
int ask_int(const char* msg, const char* error_msg);
double ask_double(const char* msg, const char* error_msg);
char* ask_string(const char* msg, const char* error_msg);

#endif

//-------------------

//log.c
#include <stdio.h>
#include <stdarg.h>
#include "log.h"

void log_message(LogLevel level, const char* format, ...) {
    va_list args;
    va_start(args, format);

    FILE* logfile;
    const char* filename = "log.txt";
    const char* mode = "a";

    logfile = fopen(filename, mode);
    if (logfile == NULL) {
        fprintf(stderr, "Error: Failed to open log file '%s'.\n", filename);
        return;
    }

    FILE* output = level == ERROR ? stderr : stdout;

    fprintf(output, "[");

    switch (level) {
        case DEBUG:
            fprintf(output, "DEBUG: ");
            fprintf(logfile, "[DEBUG: ");
            break;
        case INFO:
            fprintf(output, "INFO: ");
            fprintf(logfile, "[INFO:  ");
            break;
        case ERROR:
            fprintf(output, "ERROR: ");
            fprintf(logfile, "[ERROR: ");
            break;
    }

    fprintf(output, "] ");

    vfprintf(output, format, args);
    vfprintf(logfile, format, args);

    fprintf(output, "\n");
    fprintf(logfile, "]\n");

    fclose(logfile);
    va_end(args);
}
//-------------------

//input.h
#ifndef LAB7_LOG_H
#define LAB7_LOG_H

typedef enum {
    DEBUG,
    INFO,
    ERROR
} LogLevel;

void log_message(LogLevel level, const char* format, ...);

#endif
//-------------------

//main.c
#include <stdio.h>
#include <malloc.h>
#include "convert.h"
#include "input.h"
#include "datetime.h"
#include "log.h"

int main()
{
    log_message(INFO, "Program started");
    while (true)
    {
        int year = ask_int("Enter Year: ", "Invalid year");
        int month = ask_int("Enter Month: ", "Invalid month");
        int day = ask_int("Enter Day: ", "Invalid day");
        int hour = ask_int("Enter Hour: ", "Invalid hour");
        int minute = ask_int("Enter Minute: ", "Invalid minute");
        int second = ask_int("Enter Second: ", "Invalid second");
        double millisecond = ask_double("Enter Millisecond: ", "Invalid millisecond");

        DateTime dateTime;
        dateTime.year = year;
        dateTime.month = month;
        dateTime.day = day;
        dateTime.hour = hour;
        dateTime.minute = minute;
        dateTime.second = second;
        dateTime.millisecond = millisecond;

        bool is_valid = date_is_valid(dateTime);

        log_message(DEBUG, "Date input: %04d-%02d-%02d %02d:%02d:%02d.%03.0f, Valid: %s",
                    dateTime.year, dateTime.month, dateTime.day,
                    dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond,
                    is_valid ? "true" : "false");

        printf("Is Date Valid: %s\n", is_valid ? "true" : "false");
        log_message(INFO, "Date validity: %s", is_valid ? "true" : "false");

        if (is_valid)
        {
            char* datetime_str = get_datetime_str(dateTime);
            if (datetime_str != NULL)
            {
                printf("Formatted Date: %s\n", datetime_str);
                log_message(INFO, "Formatted Date: %s", datetime_str);
                free(datetime_str); 
            }
            else
            {
                printf("Error: Unable to format date.\n");
                log_message(ERROR, "Failed to format date");
            }
        }

        YESNO continue_input = ask_yes_no("Do you want to enter new date and time? (y/n): ",
                                          "Invalid input. Please enter 'y' or 'n'.");
        if (continue_input == NO)
        {
            break;
        }
    }

    log_message(INFO, "Program ended");

    return 0;
}
//-----------------